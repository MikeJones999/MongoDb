//Queries for mongodb

using testdb as collections - based on following information 

db.testdb.insert([{"name" : "Dale Cooper", "street" : "123 Main St", "city" : "Yakima", "state" : "WA", "dob" : new Date(1959, 2, 22), "sex" : "M", "gpa" : 3.5, "status" : "student", "tests" : [10, 9, 8], "contact info" : {"email" : "dc@aol.com", "phone" : "792-223-8901"}}, 
{"name" : "Harry Truman", "street" : "202 South St", "city" : "Vancouver", "state" : "WA", "dob" : new Date(1946, 1, 24), "sex" : "M", "gpa" : 3.4, "status" : "student", "tests" : [8, 9, 8], "contact info" : {"email" : "ht@aol.com", "phone" : "792-223-9810"}},
{"name" : "Shelly Johnson", "street" : "9 Pond Rd", "city" : "Sparks", "state" : "NV", "dob" : new Date(1970, 12, 12), "sex" : "F", "gpa" : 2.9, "status" : "dropout", "tests" : [10, 8, 0], "contact info" : {"email" : "sj@aol.com", "phone" : "792-223-6734"}},
{"name" : "Bobby Briggs", "street" : "14 12th St", "city" : "San Diego", "state" : "CA", "dob" : new Date(1967, 5, 24), "sex" : "M", "gpa" : 2.0, "status" : "student", "tests" : [5, 4, 6], "contact info" : {"email" : "bb@aol.com", "phone" : "792-223-6178"}},
{"name" : "Donna Hayward", "street" : "120 16th St", "city" : "Davenport", "state" : "IA", "dob" : new Date(1970, 3, 24), "sex" : "F", "gpa" : 3.7, "status" : "student", "tests" : [10, 8, 8], "contact info" : {"email" : "dh@aol.com", "phone" : "792-223-2001"}},
{"name" : "Audrey Horne", "street" : "342 19th St", "city" : "Detroit", "state" : "MI", "dob" : new Date(1965, 2, 1), "sex" : "F", "gpa" : 3.0, "status" : "student", "tests" : [9, 9, 8], "contact info" : {"email" : "ah@aol.com", "phone" : "792-223-2002"}},
{"name" : "James Hurley", "street" : "2578 Cliff St", "city" : "Queens", "state" : "NY", "dob" : new Date(1967, 1, 2), "sex" : "M", "gpa" : 2.9, "status" : "dropout", "tests" : [8, 9, 0], "contact info" : {"email" : "jh@aol.com", "phone" : "792-223-1890"}},
{"name" : "Lucy Moran", "street" : "178 Dover St", "city" : "Hollywood", "state" : "CA", "dob" : new Date(1954, 11, 27), "sex" : "F", "gpa" : 3.0, "status" : "student", "tests" : [9, 9, 8], "contact info" : {"email" : "lm@aol.com", "phone" : "792-223-9678"}},
{"name" : "Tommy Hill", "street" : "672 High Plains", "city" : "Tucson", "state" : "AZ", "dob" : new Date(1951, 12, 21), "sex" : "M", "gpa" : 3.7, "status" : "student", "tests" : [10, 9, 9], "contact info" : {"email" : "th@aol.com", "phone" : "792-223-1115"}},
{"name" : "Andy Brennan", "street" : "281 4th St", "city" : "Jacksonville", "state" : "NC", "dob" : new Date(1960, 12, 27), "sex" : "M", "gpa" : 2.5, "status" : "student", "tests" : [7, 9, 8], "contact info" : {"email" : "ab@aol.com", "phone" : "792-223-8902"}},
])



//drop database database
 db.testdb.drop()

 //find all details on above based on key/value criteria
 db.testdb.find( {"state" : "WA", "sex" : "M"}).pretty()
 
 
//return name and dob of students based upon key/value criteria
db.testdb.find( {"state" : "WA", "sex" : "M"}, {"name" : 1, "dob" : 1, "_id" : 0}) 

//"name" : 1 = means return name , "_id" : 0 = do not return _id - _id is always returned where as others are not returned by default

//searches using ranges (<, >, =>, etc)
db.testdb.find( {"gpa" : {"$gte" : 3.0, "$lte" : 3.5}}, {"name" : 1, "dob" : 1, "_id" : 0})

//$gte = greater than or equals to, //$lte = less than or equals to

//can use javascript to conduct searches
testdb > year1969 = new Date("01/01/1969")
testdb > db.testdb.find( {"dob" : { "$gte" : year1969}}, {"name" : 1, "dob" : 1, "_id" : 0})

//$ne = not equals to

//checking for information conatined within an array/set 
{"$in" : []}

//return name, dob for students with gpa in/not in array [3.5,3.4,3.7]
db.testdb.find({"gpa" : {"$in" : [3.5, 3.4, 3.7]}}, {"name" : 1, "dob" : 1, "_id" : 0})  // = in
db.testdb.find({"gpa" : {"$nin" : [3.5, 3.4, 3.7]}}, {"name" : 1, "dob" : 1, "_id" : 0})  //= not in

//or searches  = $or
//find all students (name/dob) who have dropped out or have gpa less than equal to 3.0
db.testdb.find({"$or" : [{"status" : "drop"}, {"gpa" : {"$lte" : 3.0}}]}, {"name" : 1, "dob" : 1, "_id" : 0})

//not - doesnt meet condition = $not
//greater than $gt - return all students (name/dob) whose gpa is not greater than 3.0
db.testdb.find({"gpa" : {"$not" : {"$gt" : 3.0}}}, {"name" : 1, "dob" : 1, "_id" : 0})

//limit the amount of results that you return - limit(num)
db.testdb.find({"gpa" : {"$not" : {"$gt" : 3.0}}}, {"name" : 1, "dob" : 1, "_id" : 0}).limit(3)
//limits the number returned to 3 students

//skip the first amount of students - skip(num)
db.testdb.find({"gpa" : {"$not" : {"$gt" : 3.0}}}, {"name" : 1, "dob" : 1, "_id" : 0}).skip(3)

//sort by key/value -sort asc({"key" : 1})  - 1 being true
db.testdb.find({"gpa" : {"$not" : {"$gt" : 3.0}}}, {"name" : 1, "dob" : 1, "_id" : 0}).sort({"name" : 1})

//reg expression - /      ^D - begging with D, .* - match any number of characters like wildcard, $/ = end of line
db.testdb.find({"name" : /^D.*$/}, {"name" : 1, "_id" : 0})

//check arrays within documents
//this checks each student's test array - named tests - for a score of 0
db.testdb.find({"tests" : 0}, {"name" : 1, "_id" : 0})

//check all ($all) to have the corresponding elements - in this example find the student that had both a 10 and 0 in her tests array
db.testdb.find({"tests" : {"$all" : [0, 10]}}, {"name" : 1, "_id" : 0})


//check a particular element position in an array - this examplpe looking at tests's first element 0 and seeing if it equated to 10
db.testdb.find({"tests.0" : 10}, {"name" : 1})

//update an additionl test result
db.testdb.update({"name" : "Dale Cooper"}, {"$push" : {tests: 9}})

//search for size of an array - $size
//search for student that has taken 4 tests - (make sure one student at least has an array of 4)
db.testdb.find({"tests" : {"$size" : 4}}, {"name" : 1})

//return the first stipulated number of elements in an array - $slice
db.testdb.find({"name" : "Dale Cooper"}, {"tests" : {"$slice" : 2}}, {"name" : 1, "tests" : 1})
